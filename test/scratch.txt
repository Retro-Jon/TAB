# Blocks are sections containing code that can be used in other sections.
# Blocks cannot contain other blocks.
# The run command cannot be used to run a block recursively

.block test
	(say "This is a test block.")

# Sections contain blocks of code

.section start
	# Local items are evaluated before global items.

	# Auto blocks run upon entering the section.

	# Run upon entering this section.

	(begin local auto)
		(say "Start section")

		# Runs the code from test.
		# run only accepts a block as an argument.
		(run test)
		(enter-dialogue "test")

		(item "health" 10)
		(item "coin" 20)
		# Accepts any quantity
		(list "inventory" "sword" 1)
		# Accepts any quantity > 0
		# If quantity < 0, then Drop item
		(inventory "inventory" "sword" 1)
		(inventory "potions" "health" 3)
	(end)

	# Run upon entering any section.

	(begin global auto)
		(say "Global auto")
	(end)

	# Actions are evaluated when the user provides input.
	# If any of the given patterns are found in the command, the action runs.

	# Make action available in this section
	
	(begin local action "look")
		(say "You see someone in the distance.")
	(end)

	# Make action available in all sections

	(begin global action "wave")
		(say "You wave.")
	(end)

	# Events are evaluated after every user interaction.
	# If the given condition for the event is true, the event runs.

	# Make event available in this section

	(begin local event @EnemyHealth <= 0)
		(say "The enemy is dead.")
	(end)

	# Make event available in all sections

	(begin global event $PlayerHealth <= 0)
		(say "You died.")
	(end)

	# Dialogs are entered when the start command is used.

	(begin local dialogue "test")
		# Use | to combine multiple commands into one statement.
		# If the command before | returns false, stop executing the statement.

		(case "hi" "hello" | say "Greetings.")
		(case "bye" "see you" "see ya" | say "Until then." | leave-dialogue)
		(case "buy,sword" | if $coin >= 10 | set coin to $coin - 10 |
			put 1 sword in inventory)
		(case "sell,sword" | if $inventory:sword >= 1 |
			drop 1 sword from inventory)
	(end)

	(begin global action "potions")
		(say "Potions: $potions")
	(end)

	(begin global action "use,health")
		(if $potions:health = 0 | color red |
			say "You don't have any health potions." | default color)

		(if $potions:health > 0 | drop 1 health from potions |
			set health to $health + 5)
	(end)

	(begin local auto)
		(data enemy_health 5)
		(say "@enemy_health")
	(end)




